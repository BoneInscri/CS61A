#lang sicp

; vector
(define (make-vect xcor ycor)
  (list xcor ycor))
(define (xcor-vect vec)
  (car vec))
(define (ycor-vect vec)
  (car (cdr vec)))
(define (add-vect vec1 vec2)
  (make-vect (+ (xcor-vect vec1) (xcor-vect vec2))
             (+ (ycor-vect vec1) (ycor-vect vec2))))
(define (sub-vect vec1 vec2)
  (make-vect (- (xcor-vect vec1) (xcor-vect vec2))
             (- (ycor-vect vec1) (ycor-vect vec2))))
(define (scale-vect s vec)
  (make-vect (* s (xcor-vect vec))
             (* s (ycor-vect vec))))

; frame
(define (make-frame origin edge1 edge2)
  (list origin edge1 edge2))
(define (origin-frame frame)
  (car frame))
(define (edge1-frame frame)
  (car (cdr frame)))
(define (edge2-frame frame)
  (car (cdr (cdr frame))))

(define (frame-coord-map frame)
  (lambda (v)
    (add-vect
     (origin-frame frame)
     (add-vect (scale-vect (xcor-vect v)
                           (edge1-frame frame))
               (scale-vect (ycor-vect v)
                           (edge2-frame frame))))))

(define a-frame (make-frame (make-vect 0 0)
                            (make-vect 1 2)
                            (make-vect 3 3)))
((frame-coord-map a-frame) (make-vect 0 0))
; frame (another implements)
;(define (make-frame origin edge1 edge2)
;  (cons origin (cons edge1 edge2)))
;(define (origin-frame frame)
;  (car frame))
;(define (edge1-frame frame)
;  (car (cdr frame)))
;(define (edge2-frame frame)
;  (cdr (cdr frame)))